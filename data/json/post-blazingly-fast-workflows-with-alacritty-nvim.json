{"images":{"alt_1":"https://via.placeholder.com/300","alt_2":"https://via.placeholder.com/300","alt_3":"https://via.placeholder.com/300","alt_4":"https://via.placeholder.com/300","alt_5":"https://via.placeholder.com/300","alt_6":"https://via.placeholder.com/300","main":"https://i.imgur.com/50fXw2n.png"},"_id":"66866e78a99e0662c12e38db","title":"Blazingly fast workflows with Alacritty + nvim","subtitle":"Setting up a terminal-based IDE","description":"## Motivation\n\nI've always been a fan of terminal-based editors so I thought it would be nice to finally set up something. Ideally this should help me reduce time to debug errors in my code, but also navigate complex logs and configs; something I do every day for work.\n\n**[Github repo for all configuration files](https://github.com/sfaizh/alacritty-nvim-config/tree/main)**\n\n&nbsp;\n\n### Alacritty\n\nThe terminal I decided to go with was Alacritty. Josean has documented this really well in his post: **[How To Make Your macOS Terminal Amazing With Alacritty](https://www.josean.com/posts/how-to-setup-alacritty-terminal)**.\n\nFor themeing I'm using `gruvbox-light` which you can set in nvchad themes and alacritty so they match. See **[Alacritty theme](https://github.com/alacritty/alacritty-theme)** for more information.\n\nOnce you've installed the new terminal and decided on themeing we can move on to the next step: Neovim.\n\n&nbsp;\n\n## Setting up Neovim\n\nDepending on your OS you have a few options. You can either **[install from scratch](https://github.com/neovim/neovim/blob/master/INSTALL.md)**, or a bundler like NvChad. I used **[NvChad](https://nvchad.com/docs/quickstart/install)** to save time, and it had everything I needed.\n\n&nbsp;\n\n### Installation\n\nInstalling is simple, just clone the starter config into your nvim directory.\n\n``git clone https://github.com/NvChad/starter ~/.config/nvim && nvim``\n\nOnce you're in simply run ``:MasonInstallAll ``\n\n&nbsp;\n\n#### Syntax highlighting\n\nFor syntax highlighting we can use treesitter which comes bundled. For example for **go** ``:TSInstall go``. To check which syntaxes have been installed using ``TSInstallInfo``.\n\n&nbsp;\n\n#### Automatic formatting\n\nFor the autoformatter you need to ensure you have installed your specified language server and added it to $PATH. Then ensure you're loading the plugin for that specific server.\n\nAs an example, the following can be used for a typescript LSP:\n\n``npm install -g typescript typescript-language-server``\n\nMake sure to update your bash profile:\n\n``export PATH=\"$PATH:$(npm bin -g)\"``\n\nWe can then add elentok's **[Format on Save](https://github.com/elentok/format-on-save.nvim)** to our lazy.nvim config in `~/.config/nvim/lua/plugins/init.lua`.\n\n```\n\n  {\n    \"elentok/format-on-save.nvim\",\n    init = function()\n      local formatters = require(\"format-on-save.formatters\")\n      require(\"format-on-save\").setup({\n        formatter_by_ft = {\n          css = formatters.lsp,\n          html = formatters.lsp,\n          java = formatters.lsp,\n          javascript = formatters.lsp,\n          json = formatters.lsp,\n          lua = formatters.lsp,\n          markdown = formatters.prettierd,\n          openscad = formatters.lsp,\n          python = formatters.black,\n          rust = formatters.lsp,\n          scad = formatters.lsp,\n          scss = formatters.lsp,\n          sh = formatters.shfmt,\n          terraform = formatters.lsp,\n          typescript = formatters.prettierd,\n          typescriptreact = formatters.prettierd,\n          yaml = formatters.lsp,\n        }\n      })\n      vim.api.nvim_create_autocmd(\"BufWritePost\", {\n        pattern = { \"*.js\", \"*.jsx\", \"*.ts\", \"*.tsx\" },\n        callback = function()\n          require(\"format-on-save\").format()\n        end\n      })\n    end\n  },\n\n  {\n    'neovim/nvim-lspconfig',\n    config = function()\n      local lspconfig = require('lspconfig')\n\n      -- Example: Set up tsserver for JavaScript/TypeScript\n      lspconfig.tsserver.setup({\n        on_attach = function(client)\n          client.server_capabilities.document_formatting = true\n        end,\n      })\n\n      -- You can add more LSP server setups here if needed\n    end,\n  },\n```\n\n&nbsp;\n\nFor other languages, match any additional patterns as needed and remember to install the correct LSP server and add it to your path similar to how we did before. Same for updating``formatter_by_ft`` to include the language you need supported.\n\nFor now I've set it up for typescript/javascript projects.\n\n#### Terminal using toggleterm\n\nFor quick access to a terminal directly from nvim this is a must. Download **[toggleterm](https://github.com/akinsho/toggleterm.nvim)** and add the following to your **[lazy.nvim](https://github.com/folke/lazy.nvim)** config in ```~/.config/nvim/lua/plugins/init.lua```\n\n```\n{\n    'akinsho/toggleterm.nvim',\n    init = function()\n    require(\"toggleterm\").setup({\n        size = 20,\n        open_mapping = [[<c-\\>]],\n        direction = \"horizontal\",\n        hide_numbers = true,\n        shade_terminals = true,\n        shading_factor = 2,\n        start_in_insert = true,\n        insert_mappings = true,\n        persist_size = true,\n        close_on_exit = true,\n        shell = vim.o.shell,\n        float_opts = {\n            border = \"curved\",\n            winblend = 0,\n            highlights = {\n                border = \"Normal\",\n                background = \"Normal\",\n            },\n        },\n    })\n    end,\n    version = \"*\",\n    config = true\n},\n```\n\nFor reference I added both those configuration blocks near the end of my `init.lua`, just before ``load_config()``. You can customise the settings to your preference by following the relevant documentation.\n\nI'm still learning and ideally Iâ€™d like to use this for more than coding. Debugging and log analysis would be my next use-case. Session management is also important for me so I can configure specific workspaces.\n\nThis is a decent base though, and once you get a hang of the basic movements, buffers, tabs, and filters you can really get the most out of this setup.\n\n&nbsp;\n\nPlease feel free to comment below if you have experience daily'ing a terminal based IDE and any tips/tricks for someone getting started!\n\n&nbsp;\n\n### custom bindings\n\n- ```jk``` : exit insert mode\n- ```<C-f>``` : find string\n- ``` yy ``` yabai bsp mode\n- ``` yff ``` yabai float mode (normal tiling)\n\n### sessions\n\n- ``` <Space + ss> ``` save session\n- ```<Space + sl> ``` load last session\n- ```<Space + js> ``` load specific session using telescope\n\n### toggleterm\n\n- ```<Space + \\>``` : open new terminal\n- ```<3 + Space + \\>``` : example, open 3rd terminal instance. Note: If you do this in normal mode it will create a vertical split\n\n### nvim shortcuts\n\n- ```<Space + th>``` : themes\n- ```<Space + ch>``` : cheatsheet\n- ```<Ctrl + n>``` : directory navigation\n- ```<Space + ff>``` : find and open file\n- ```<Space + wK>``` : key lookup\n- ```<Tab>``` : switch buffers\n- ```<Ctrl + W>``` : window shortcuts\n\n### directory and windows\n\n- ```<C+n>``` : open file tree\n- ```d``` : delete folder\n- ```a``` : create file\n- ```r``` : rename file\n- ```-``` : uncollapse file tree\n- ```.``` : open vim cli command with current directory\n- ```<Space+ ff>``` : find and open file\n- ```<Space + fm>``` : auto-formatter using LSP\n- ```<Space + h>``` : terminal window\n- ```<C+>>``` or ```<C+<>``` : navigate parent folders in tree\n- ```<C+Ws>``` : split window horizontally\n- ```<C+Wv>``` : split window vertically\n- ```<C+Ww>``` : toggle windows\n\n### basic vim navigation\n\n- ```$``` : end of line\n- ```0``` : start of line\n- ```gg``` : start of file\n- ```G``` : end of file\n- ```a``` : insert after cursor\n- ```i``` : insert before cursor\n- ```%``` : toggle start and end brace\n- ```w``` : next word\n- ```e``` : end of word\n- ```b``` : previous word\n- ```r``` : replace word\n- ```%``` : toggle start and end brace\n- ```:e file_path``` : edit file\n- ```50%``` : go to middle of file","author":"Faizan","date":"2024-07-04T19:18","tags":"neovim nvchad vim IDE","footer":"","isPrivate":false,"createdAt":"2024-07-04T09:42:16.782Z","updatedAt":"2024-07-21T04:07:41.493Z","__v":0,"slug":"blazingly-fast-workflows-with-alacritty-nvim"}